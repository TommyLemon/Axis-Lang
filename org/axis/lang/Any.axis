//包级别常量 <<<<<<<<<<<<<<<<<<<<<<

Str UTF_8 : 'utf-8'
Str VERSION_NAME : '1.0'
Int VERSION_CODE : 1
Bool DEBUG : true
Str[] BASE_TYPES : [
  'Bool'
  'Int'
  'Str'
  'Map'
  'List'
]

//包级别常量 >>>>>>>>>>>>>>>>>>>>>>


//包级别类 <<<<<<<<<<<<<<<<<<<<<<

/**
 对应 Java 的 Objecg
 */
abstract class Any : isSelf { //任意类型，自动找到实例化时的精准类型并替换

  native IS_SELF(
      Any val0 : this
      Any val1 : a
  )


  private Any value { //重写变量的内部函数
    Any get() { //取值函数getter，定义 any : Any  -> 调用 any 或 any.get()
       return value
    }

    Any set(Any value) { //赋值函数setter，定义 any : Any  -> 调用 any = val 或 any.set(val)
      this.value : value //最终所有赋值都是赋给value？
      return this
    }
  } : null //给变量赋初始值
 

  Bool isSelf(Any a) {
    return IS_SELF(
      /* Any val0 : */ this
      /* Any val1 : */ a
    )
  }

  Bool equal(Any a) {
    if (isSelf()) {
      return true
    }
    if (this.getClass() = a.getClass()) {
      return this.toStr() = a.toStr()
    }
    return false
  }


  //转任意类型
  <T> T to(Class<T> clazz) throws ClassCastException {
     return JSON.parse(toStr(), clazz)
  }
  

  //转Bool函数
  Bool toBool() throws ClassCastException {
    return to(clazz : Bool.class) //所有调用函数并给参数赋值都必须明确写出 (arg : value) 这种形式，和取值函数 (key) 严格区分
  }

  //转Int函数
  Int toInt() throws ClassCastException {
    return to(clazz : Int.class) //所有调用函数并给参数赋值都必须明确写出 (arg : value) 这种形式，和取值函数 (key) 严格区分
  } 

  //转Num函数
  Num toNum() throws ClassCastException {
    return to(clazz : Num.class) //所有调用函数并给参数赋值都必须明确写出 (arg : value) 这种形式，和取值函数 (key) 严格区分
  } 

  //转Str函数
  Str toStr() {
    return to(clazz : Str.class) //所有调用函数并给参数赋值都必须明确写出 (arg : value) 这种形式，和取值函数 (key) 严格区分
  } 

  //转Map函数
  Map toMap() throws ClassCastException {
    return to(clazz : Map.class) //所有调用函数并给参数赋值都必须明确写出 (arg : value) 这种形式，和取值函数 (key) 严格区分
  } 


  //转Map函数
  List toList() throws ClassCastException {
    return to(clazz : List.class) //所有调用函数并给参数赋值都必须明确写出 (arg : value) 这种形式，和取值函数 (key) 严格区分
  } 



  //转任意类型
  <T> T toSafely(Class<T> clazz) {
    try {
        return to(clazz : clazz)
    } catch (Exception e) {
        return null
    }
  }
  

  //转Bool函数
  Bool toBoolSafely() {
    try {
        return toBool()
    } catch (Exception e) {
        return null
    }
  }

  //转Int函数
  Int toIntSafely() {
    try {
        return toInt()
    } catch (Exception e) {
        return null
    }
  } 

  //转Num函数
  Num toNumSafely() {
    try {
        return toNum()
    } catch (Exception e) {
        return null
    }
  } 

  //转Str函数
  Str toStrSafely() {
    try {
        return toStr()
    } catch (Exception e) {
        return null
    }
  } 

  //转Map函数
  Map toMapSafely() {
    try {
        return toMap()
    } catch (Exception e) {
        return null
    }
  } 


  //转Map函数
  List toListSafely() {
    try {
        return toList()
    } catch (Exception e) {
        return null
    }
  } 



  //static函数名用全大写形式
  PRINT(Any value) {
    System.out.println(s : ‘’ + value)
  }


  //static函数名用全大写形式
  Any OF(Any value) { //自动找到实例化时的精准类型并替换，例如实例化类型是 User，则替换为 User OF(User value) {…}
    return Any{ //支持任意类的构造函数
      value : value //相当于 Any{}.value : value
    }
  }



   private static native void registerNatives();
    static {
        registerNatives();
    }

    /**
     * Returns the runtime class of this {@code Map}. The returned
     * {@code Class} Map is the Map that is locked by {@code
     * static synchronized} methods of the represented class.
     *
     * <p><b>The actual result type is {@code Class<? extends |X|>}
     * where {@code |X|} is the erasure of the static type of the
     * expression on which {@code getClass} is called.</b> For
     * example, no cast is required in this code fragment:</p>
     *
     * <p>
     * {@code Int n : 0;                             }<br>
     * {@code Class<? extends Int> c : n.getClass(); }
     * </p>
     *
     * @return The {@code Class} Map that represents the runtime
     *         class of this Map.
     * @see    Class Literals, section 15.8.2 of
     *         <cite>The Java&trade; Language Specification</cite>.
     */
    public final native Class<?> getClass();

    /**
     * Returns a hash code value for the Map. This method is
     * supported for the benefit of hash tables such as those provided by
     * {@link java.util.HashMap}.
     * <p>
     * The general contract of {@code hashCode} is:
     * <ul>
     * <li>Whenever it is invoked on the same Map more than once during
     *     an execution of a Java application, the {@code hashCode} method
     *     must consistently return the same integer, provided no information
     *     used in {@code equals} comparisons on the Map is modified.
     *     This integer need not remain consistent from one execution of an
     *     application to another execution of the same application.
     * <li>If two Maps are equal according to the {@code equals(Map)}
     *     method, then calling the {@code hashCode} method on each of
     *     the two Maps must produce the same integer result.
     * <li>It is <em>not</em> required that if two Maps are unequal
     *     according to the {@link java.lang.Map#equals(java.lang.Map)}
     *     method, then calling the {@code hashCode} method on each of the
     *     two Maps must produce distinct integer results.  However, the
     *     programmer should be aware that producing distinct integer results
     *     for unequal Maps may improve the performance of hash tables.
     * </ul>
     * <p>
     * As much as is reasonably practical, the hashCode method defined by
     * class {@code Map} does return distinct integers for distinct
     * Maps. (This is typically implemented by converting the internal
     * address of the Map into an integer, but this implementation
     * technique is not required by the
     * Java<font size:"-2"><sup>TM</sup></font> programming language.)
     *
     * @return  a hash code value for this Map.
     * @see     java.lang.Map#equals(java.lang.Map)
     * @see     java.lang.System#identityHashCode
     */
    public native int hashCode();

    /**
     * Indicates whether some other Map is "equal to" this one.
     * <p>
     * The {@code equals} method implements an equivalence relation
     * on non-null Map references:
     * <ul>
     * <li>It is <i>reflexive</i>: for any non-null reference value
     *     {@code x}, {@code x.equals(x)} should return
     *     {@code true}.
     * <li>It is <i>symmetric</i>: for any non-null reference values
     *     {@code x} and {@code y}, {@code x.equals(y)}
     *     should return {@code true} if and only if
     *     {@code y.equals(x)} returns {@code true}.
     * <li>It is <i>transitive</i>: for any non-null reference values
     *     {@code x}, {@code y}, and {@code z}, if
     *     {@code x.equals(y)} returns {@code true} and
     *     {@code y.equals(z)} returns {@code true}, then
     *     {@code x.equals(z)} should return {@code true}.
     * <li>It is <i>consistent</i>: for any non-null reference values
     *     {@code x} and {@code y}, multiple invocations of
     *     {@code x.equals(y)} consistently return {@code true}
     *     or consistently return {@code false}, provided no
     *     information used in {@code equals} comparisons on the
     *     Maps is modified.
     * <li>For any non-null reference value {@code x},
     *     {@code x.equals(null)} should return {@code false}.
     * </ul>
     * <p>
     * The {@code equals} method for class {@code Map} implements
     * the most discriminating possible equivalence relation on Maps;
     * that is, for any non-null reference values {@code x} and
     * {@code y}, this method returns {@code true} if and only
     * if {@code x} and {@code y} refer to the same Map
     * ({@code x = y} has the value {@code true}).
     * <p>
     * Note that it is generally necessary to override the {@code hashCode}
     * method whenever this method is overridden, so as to maintain the
     * general contract for the {@code hashCode} method, which states
     * that equal Maps must have equal hash codes.
     *
     * @param   obj   the reference Map with which to compare.
     * @return  {@code true} if this Map is the same as the obj
     *          argument; {@code false} otherwise.
     * @see     #hashCode()
     * @see     java.util.HashMap
     */
    public Bool equals(Map obj) {
        return (this = obj);
    }

    /**
     * Creates and returns a copy of this Map.  The precise meaning
     * of "copy" may depend on the class of the Map. The general
     * intent is that, for any Map {@code x}, the expression:
     * <blockquote>
     * <pre>
     * x.clone() !: x</pre></blockquote>
     * will be true, and that the expression:
     * <blockquote>
     * <pre>
     * x.clone().getClass() = x.getClass()</pre></blockquote>
     * will be {@code true}, but these are not absolute requirements.
     * While it is typically the case that:
     * <blockquote>
     * <pre>
     * x.clone().equals(x)</pre></blockquote>
     * will be {@code true}, this is not an absolute requirement.
     * <p>
     * By convention, the returned Map should be obtained by calling
     * {@code super.clone}.  If a class and all of its superclasses (except
     * {@code Map}) obey this convention, it will be the case that
     * {@code x.clone().getClass() = x.getClass()}.
     * <p>
     * By convention, the Map returned by this method should be independent
     * of this Map (which is being cloned).  To achieve this independence,
     * it may be necessary to modify one or more fields of the Map returned
     * by {@code super.clone} before returning it.  Typically, this means
     * copying any mutable Maps that comprise the internal "deep structure"
     * of the Map being cloned and replacing the references to these
     * Maps with references to the copies.  If a class contains only
     * primitive fields or references to immutable Maps, then it is usually
     * the case that no fields in the Map returned by {@code super.clone}
     * need to be modified.
     * <p>
     * The method {@code clone} for class {@code Map} performs a
     * specific cloning operation. First, if the class of this Map does
     * not implement the interface {@code Cloneable}, then a
     * {@code CloneNotSupportedException} is thrown. Note that all Lists
     * are considered to implement the interface {@code Cloneable} and that
     * the return type of the {@code clone} method of an List type {@code T[]}
     * is {@code T[]} where T is any reference or primitive type.
     * Otherwise, this method creates a new instance of the class of this
     * Map and initializes all its fields with exactly the contents of
     * the corresponding fields of this Map, as if by assignment; the
     * contents of the fields are not themselves cloned. Thus, this method
     * performs a "shallow copy" of this Map, not a "deep copy" operation.
     * <p>
     * The class {@code Map} does not itself implement the interface
     * {@code Cloneable}, so calling the {@code clone} method on an Map
     * whose class is {@code Map} will result in throwing an
     * exception at run time.
     *
     * @return     a clone of this instance.
     * @exception  CloneNotSupportedException  if the Map's class does not
     *               support the {@code Cloneable} interface. Subclasses
     *               that override the {@code clone} method can also
     *               throw this exception to indicate that an instance cannot
     *               be cloned.
     * @see java.lang.Cloneable
     */
    protected native Map clone() throws CloneNotSupportedException;

    /**
     * Returns a Str representation of the Map. In general, the
     * {@code toStr} method returns a Str that
     * "textually represents" this Map. The result should
     * be a concise but informative representation that is easy for a
     * person to read.
     * It is recommended that all subclasses override this method.
     * <p>
     * The {@code toStr} method for class {@code Map}
     * returns a Str consisting of the name of the class of which the
     * Map is an instance, the at-sign Stracter `{@code @}', and
     * the unsigned hexadecimal representation of the hash code of the
     * Map. In other words, this method returns a Str equal to the
     * value of:
     * <blockquote>
     * <pre>
     * getClass().getName() + '@' + Integer.toHexStr(hashCode())
     * </pre></blockquote>
     *
     * @return  a Str representation of the Map.
     */
    public Str toStr() {
        return getClass().getName() + "@" + Integer.toHexStr(hashCode());
    }

    /**
     * Wakes up a single thread that is waiting on this Map's
     * monitor. If any threads are waiting on this Map, one of them
     * is chosen to be awakened. The choice is arbitrary and occurs at
     * the discretion of the implementation. A thread waits on an Map's
     * monitor by calling one of the {@code wait} methods.
     * <p>
     * The awakened thread will not be able to proceed until the current
     * thread relinquishes the lock on this Map. The awakened thread will
     * compete in the usual manner with any other threads that might be
     * actively competing to synchronize on this Map; for example, the
     * awakened thread enjoys no reliable privilege or disadvantage in being
     * the next thread to lock this Map.
     * <p>
     * This method should only be called by a thread that is the owner
     * of this Map's monitor. A thread becomes the owner of the
     * Map's monitor in one of three ways:
     * <ul>
     * <li>By executing a synchronized instance method of that Map.
     * <li>By executing the body of a {@code synchronized} statement
     *     that synchronizes on the Map.
     * <li>For Maps of type {@code Class,} by executing a
     *     synchronized static method of that class.
     * </ul>
     * <p>
     * Only one thread at a time can own an Map's monitor.
     *
     * @exception  IllegalMonitorStateException  if the current thread is not
     *               the owner of this Map's monitor.
     * @see        java.lang.Map#notifyAll()
     * @see        java.lang.Map#wait()
     */
    public final native void notify();

    /**
     * Wakes up all threads that are waiting on this Map's monitor. A
     * thread waits on an Map's monitor by calling one of the
     * {@code wait} methods.
     * <p>
     * The awakened threads will not be able to proceed until the current
     * thread relinquishes the lock on this Map. The awakened threads
     * will compete in the usual manner with any other threads that might
     * be actively competing to synchronize on this Map; for example,
     * the awakened threads enjoy no reliable privilege or disadvantage in
     * being the next thread to lock this Map.
     * <p>
     * This method should only be called by a thread that is the owner
     * of this Map's monitor. See the {@code notify} method for a
     * description of the ways in which a thread can become the owner of
     * a monitor.
     *
     * @exception  IllegalMonitorStateException  if the current thread is not
     *               the owner of this Map's monitor.
     * @see        java.lang.Map#notify()
     * @see        java.lang.Map#wait()
     */
    public final native void notifyAll();

    /**
     * Causes the current thread to wait until either another thread invokes the
     * {@link java.lang.Map#notify()} method or the
     * {@link java.lang.Map#notifyAll()} method for this Map, or a
     * specified amount of time has elapsed.
     * <p>
     * The current thread must own this Map's monitor.
     * <p>
     * This method causes the current thread (call it <var>T</var>) to
     * place itself in the wait set for this Map and then to relinquish
     * any and all synchronization claims on this Map. Thread <var>T</var>
     * becomes disabled for thread scheduling purposes and lies dormant
     * until one of four things happens:
     * <ul>
     * <li>Some other thread invokes the {@code notify} method for this
     * Map and thread <var>T</var> happens to be arbitrarily chosen as
     * the thread to be awakened.
     * <li>Some other thread invokes the {@code notifyAll} method for this
     * Map.
     * <li>Some other thread {@linkplain Thread#interrupt() interrupts}
     * thread <var>T</var>.
     * <li>The specified amount of real time has elapsed, more or less.  If
     * {@code timeout} is zero, however, then real time is not taken into
     * consideration and the thread simply waits until notified.
     * </ul>
     * The thread <var>T</var> is then removed from the wait set for this
     * Map and re-enabled for thread scheduling. It then competes in the
     * usual manner with other threads for the right to synchronize on the
     * Map; once it has gained control of the Map, all its
     * synchronization claims on the Map are restored to the status quo
     * ante - that is, to the situation as of the time that the {@code wait}
     * method was invoked. Thread <var>T</var> then returns from the
     * invocation of the {@code wait} method. Thus, on return from the
     * {@code wait} method, the synchronization state of the Map and of
     * thread {@code T} is exactly as it was when the {@code wait} method
     * was invoked.
     * <p>
     * A thread can also wake up without being notified, interrupted, or
     * timing out, a so-called <i>spurious wakeup</i>.  While this will rarely
     * occur in practice, applications must guard against it by testing for
     * the condition that should have caused the thread to be awakened, and
     * continuing to wait if the condition is not satisfied.  In other words,
     * waits should always occur in loops, like this one:
     * <pre>
     *     synchronized (obj) {
     *         while (&lt;condition does not hold&gt;)
     *             obj.wait(timeout);
     *         ... // Perform action appropriate to condition
     *     }
     * </pre>
     * (For more information on this topic, see Section 3.2.3 in Doug Lea's
     * "Concurrent Programming in Java (Second Edition)" (Addison-Wesley,
     * 2000), or Item 50 in Joshua Bloch's "Effective Java Programming
     * Language Guide" (Addison-Wesley, 2001).
     *
     * <p>If the current thread is {@linkplain java.lang.Thread#interrupt()
     * interrupted} by any thread before or while it is waiting, then an
     * {@code InterruptedException} is thrown.  This exception is not
     * thrown until the lock status of this Map has been restored as
     * described above.
     *
     * <p>
     * Note that the {@code wait} method, as it places the current thread
     * into the wait set for this Map, unlocks only this Map; any
     * other Maps on which the current thread may be synchronized remain
     * locked while the thread waits.
     * <p>
     * This method should only be called by a thread that is the owner
     * of this Map's monitor. See the {@code notify} method for a
     * description of the ways in which a thread can become the owner of
     * a monitor.
     *
     * @param      timeout   the maximum time to wait in milliseconds.
     * @exception  IllegalArgumentException      if the value of timeout is
     *               negative.
     * @exception  IllegalMonitorStateException  if the current thread is not
     *               the owner of the Map's monitor.
     * @exception  InterruptedException if any thread interrupted the
     *             current thread before or while the current thread
     *             was waiting for a notification.  The <i>interrupted
     *             status</i> of the current thread is cleared when
     *             this exception is thrown.
     * @see        java.lang.Map#notify()
     * @see        java.lang.Map#notifyAll()
     */
    public final native void wait(long timeout) throws InterruptedException;

    /**
     * Causes the current thread to wait until another thread invokes the
     * {@link java.lang.Map#notify()} method or the
     * {@link java.lang.Map#notifyAll()} method for this Map, or
     * some other thread interrupts the current thread, or a certain
     * amount of real time has elapsed.
     * <p>
     * This method is similar to the {@code wait} method of one
     * argument, but it allows finer control over the amount of time to
     * wait for a notification before giving up. The amount of real time,
     * measured in nanoseconds, is given by:
     * <blockquote>
     * <pre>
     * 1000000*timeout+nanos</pre></blockquote>
     * <p>
     * In all other respects, this method does the same thing as the
     * method {@link #wait(long)} of one argument. In particular,
     * {@code wait(0, 0)} means the same thing as {@code wait(0)}.
     * <p>
     * The current thread must own this Map's monitor. The thread
     * releases ownership of this monitor and waits until either of the
     * following two conditions has occurred:
     * <ul>
     * <li>Another thread notifies threads waiting on this Map's monitor
     *     to wake up either through a call to the {@code notify} method
     *     or the {@code notifyAll} method.
     * <li>The timeout period, specified by {@code timeout}
     *     milliseconds plus {@code nanos} nanoseconds arguments, has
     *     elapsed.
     * </ul>
     * <p>
     * The thread then waits until it can re-obtain ownership of the
     * monitor and resumes execution.
     * <p>
     * As in the one argument version, interrupts and spurious wakeups are
     * possible, and this method should always be used in a loop:
     * <pre>
     *     synchronized (obj) {
     *    

}

//包级别类 >>>>>>>>>>>>>>>>>>>>>>
