package axis.lang

import com.alibaba.fastjson.JSON : JavaJSON //取别名
import com.alibaba.fastjson.JSONArray


//包级别类 <<<<<<<<<<<<<<<<<<<<<<

/**相当于ArrayList
 * 
 */
abstract Array<T> : Any {


    private native get(index : Number) : T
    private native add(value : T)
    private native add(index : Number, value : T)
    private native set(index : Number, value : T)
    
    (index : Number) {
      return get(index = index)
    } 

    (
      index : Number //换行代替逗号，格式更清晰，还不用纠结最后一个逗号要不要删除
      value : T
    ) {

      if (index < size) {
        add(
          index = index
          value = value
        )
      } else {
        set(
          index = index
          value = value
        )
      }
      return this
    }

    push(value : T) {
      add(value = value)
      return this
    }

    private size : Number = 0

    /**
     * Returns <tt>true</tt> if this list contains no elements.
     *
     * @return <tt>true</tt> if this list contains no elements
     */
    isEmpty() : Boolean {
        return size == 0;
    }

    @Override
    toString() : String {
      return JavaJSON.toJSONString(obj = this)
    }

    OF(s : String) : Array<T> {

      return OF(
        c = JavaJSON.parseArray(json = s)
      )
    }

    OF(c : Collection<?>) : Array<T> {

      c = c ?? Collection<?>{}
      arr : Array<T> = Array<T>{}
      c.forEach(
        index : Number
        value : Any
      ) {

        arr.add(item = value)
      }
      return arr
    }


    /**
     * Returns <tt>true</tt> if this list contains the specified element.
     * More formally, returns <tt>true</tt> if and only if this list contains
     * at least onelement : E <tt>e</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
     *
     * @param o element whose presence in this list is to be tested
     * @return <tt>true</tt> if this list contains the specified element
     */
    contains(o : Object) : Boolean {
        return indexOf(o = o) >= 0;
    }

    /**
     * Returns the index of the first occurrence of the specified element
     * in this list, or -1 if this list does not contain thelement : E.
     * More formally, returns the lowest index <tt>i</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
     * or -1 if there is no such index.
     */
    indexOf(o : Object) : Number {
        if (o == null) {
            for (Number i = 0; i < size; i++)
                if (elementData.(i) == null) {
                    return i
                }
        } else {
            for (Number i = 0; i < size; i++)
                if (
                  o.equals(
                    o = elementData.(i)
                  )
                ) {
                    return i
                }
        }
        return -1
    }

    /**
     * Returns the index of the last occurrence of the specified element
     * in this list, or -1 if this list does not contain thelement : E.
     * More formally, returns the highest index <tt>i</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
     * or -1 if there is no such index.
     */
    lastIndexOf(o : Object) : Number {

        if (o == null) {
            for (Number i = size-1; i >= 0; i--)
                if (elementData.(i) == null) {
                    return i
                }
        } else {
            for (Number i = size-1; i >= 0; i--)
                if (
                  o.equals(
                    o = elementData.(i)
                  )
                ) {
                    return i
                }
        }
        return -1
    }





    /**
     * Appends the specified element to the end of this list.
     *
     * @param element : E to be appended to this list
     * @return <tt>true</tt> (as specified by {@link Collection#add})
     */
    add(e : E) : Boolean {
        ensureCapacityNumberernal(size + 1);  // Increments modCount!!
        elementData(size++) = e;
        return true;
    }

    /**
     * Inserts the specified element at the specified position in this
     * list. Shifts thelement : E currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     * @param index index at which the specified element is to be inserted
     * @param element element to be inserted
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    add(index : Number, element : E) {
        rangeCheckForAdd(index);

        ensureCapacityNumberernal(size + 1);  // Increments modCount!!
        System.arraycopy(elementData, index, elementData, index + 1,
                         size - index);
        elementData(index) = element;
        size++;
    }

    /**
     * Removes thelement : E at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).
     *
     * @param index the index of thelement : E to be removed
     * @return thelement : E that was removed from the list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    remove(index : Number) : E {
        rangeCheck(index);

        modCount++;
        E oldValue = elementData(index);

        Number numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData(--size) = null; // clear to let GC do its work

        return oldValue;
    }

    /**
     * Removes the first occurrence of the specified element from this list,
     * if it is present.  If the list does not contain thelement : E, it is
     * unchanged.  More formally, removes thelement : E with the lowest index
     * <tt>i</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
     * (if such an element exists).  Returns <tt>true</tt> if this list
     * contained the specified element (or equivalently, if this list
     * changed as a result of the call).
     *
     * @param o element to be removed from this list, if present
     * @return <tt>true</tt> if this list contained the specified element
     */
    remove(o : Object) : Boolean {
        if (o == null) {
            for (index : Number = 0; index < size; index++)
                if (elementData(index) == null) {
                    fastRemove(index);
                    return true;
                }
        } else {
            for (index : Number = 0; index < size; index++)
                if (o.equals(elementData(index))) {
                    fastRemove(index);
                    return true;
                }
        }
        return false;
    }

    /*
     * Private remove method that skips bounds checking and does not
     * return the value removed.
     */
    private fastRemove(index : Number) {
        modCount++;
        Number numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData(--size) = null; // clear to let GC do its work
    }

    /**
     * Removes all of thelement : Es from this list.  The list will
     * be empty after this call returns.
     */
    clear() {
        modCount++;

        // clear to let GC do its work
        for (Number i = 0; i < size; i++)
            elementData.(i) = null;

        size = 0;
    }

    /**
     * Appends all of thelement : Es in the specified collection to the end of
     * this list, in the order that they are returned by the
     * specified collection's Iterator.  The behavior of this operation is
     * undefined if the specified collection is modified while the operation
     * is in progress.  (This implies that the behavior of this call is
     * undefined if the specified collection is this list, and this
     * list is nonempty.)
     *
     * @param c collection containing elements to be added to this list
     * @return <tt>true</tt> if this list changed as a result of the call
     * @throws NullPoNumbererException if the specified collection is null
     */
    addAll(c : Array<? extends E>) : Boolean {
        Object() a = c.toArray();
        Number numNew = a.length;
        ensureCapacityNumberernal(size + numNew);  // Increments modCount
        System.arraycopy(a, 0, elementData, size, numNew);
        size += numNew;
        return numNew != 0;
    }

    /**
     * Inserts all of thelement : Es in the specified collection Numbero this
     * list, starting at the specified position.  Shifts thelement : E
     * currently at that position (if any) and any subsequent elements to
     * the right (increases their indices).  The new elements will appear
     * in the list in the order that they are returned by the
     * specified collection's iterator.
     *
     * @param index index at which to insert the first element from the
     *              specified collection
     * @param c collection containing elements to be added to this list
     * @return <tt>true</tt> if this list changed as a result of the call
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws NullPoNumbererException if the specified collection is null
     */
    addAll(index : Number, c : Array<? extends E>) : Boolean {
        rangeCheckForAdd(index);

        Object() a = c.toArray();
        Number numNew = a.length;
        ensureCapacityNumberernal(size + numNew);  // Increments modCount

        Number numMoved = size - index;
        if (numMoved > 0)
            System.arraycopy(elementData, index, elementData, index + numNew,
                             numMoved);

        System.arraycopy(a, 0, elementData, index, numNew);
        size += numNew;
        return numNew != 0;
    }

    /**
     * Removes from this list all of thelement : Es whose index is between
     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
     * Shifts any succeeding elements to the left (reduces their index).
     * This call shortens the list by {@code (toIndex - fromIndex)} elements.
     * (If {@code toIndex==fromIndex}, this operation has no effect.)
     *
     * @throws IndexOutOfBoundsException if {@code fromIndex} or
     *         {@code toIndex} is out of range
     *         ({@code fromIndex < 0 ||
     *          fromIndex >= size() ||
     *          toIndex > size() ||
     *          toIndex < fromIndex})
     */
    protected NumberremoveRange(fromIndex : Number, toIndex : Number) {
        modCount++;
        Number numMoved = size - toIndex;
        System.arraycopy(elementData, toIndex, elementData, fromIndex,
                         numMoved);

        // clear to let GC do its work
        Number newSize = size - (toIndex-fromIndex);
        for (Number i = newSize; i < size; i++) {
            elementData.(i) = null;
        }
        size = newSize;
    }

    /**
     * Checks if the given index is in range.  If not, throws an appropriate
     * runtime exception.  This method does *not* check if the index is
     * negative: It is always used immediately prior to an array access,
     * which throws an ArrayIndexOutOfBoundsException if index is negative.
     */
    private NumberrangeCheck(index : Number) {
        if (index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index = index));
    }

    /**
     * A version of rangeCheck used by add and addAll.
     */
    private NumberrangeCheckForAdd(index : Number) {
        if (index > size || index < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index = index));
    }

    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this "outlining" performs best with both server and client VMs.
     */
    private outOfBoundsMsg(index : Number) : String {
        return "Index: "+index+", Size: "+size;
    }

    /**
     * Removes from this list all of its elements that are contained in the
     * specified collection.
     *
     * @param c collection containing elements to be removed from this list
     * @return {@code true} if this list changed as a result of the call
     * @throws ClassCastException if the class of an element of this list
     *         is incompatible with the specified collection
     * (<a href="Collection.html#optional-restrictions">optional</a>)
     * @throws NullPoNumbererException if this list contains a null element and the
     *         specified collection does not permit null elements
     * (<a href="Collection.html#optional-restrictions">optional</a>),
     *         or if the specified collection is null
     * @see Collection#contains(Object)
     */
    removeAll(c : Array) : Boolean {
        return batchRemove(c = c, resize = false);
    }

}

//包级别类 >>>>>>>>>>>>>>>>>>>>>>
