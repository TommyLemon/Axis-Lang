package axis.lang



//包级别类 <<<<<<<<<<<<<<<<<<<<<<

String : Any { 



    length() : Number {
      return (value).length
    }

    @Override
    toString() : String {
      return this
    }

    @Override
    OF(a : Any) : String {
      return a instanceof String ? a : a.toString() //Java: return a instanceof String ? (String) a : a.toString();
    } 

    /**
     * Returns <tt>true</tt> if, and only if, {@link #length()} is <tt>0</tt>.
     *
     * @return <tt>true</tt> if {@link #length()} is <tt>0</tt>, otherwise
     * <tt>false</tt>
     *
     * @since 1.6
     */
    isEmpty() : Boolean {
        return length() == 0;
    }

    equals(a : Any, ignoreCase : Boolean = false) : Boolean { //可选参数必须设置默认值
      if (this === a) { //判断内存地址
        return true
      }
      if (a instanceof String) {
        return this == a
      }
      return equals(a : OF(a : a), ignoreCase : ignoreCase)
    }

    /**
     * Returns the <code>char</code> value at the
     * specified index. An index ranges from <code>0</code> to
     * <code>length() - 1</code>. The first <code>char</code> value of the sequence
     * is at index <code>0</code>, the next at index <code>1</code>,
     * and so on, as for array indexing.
     *
     * <p>If the <code>char</code> value specified by the index is a
     * <a href="Character.html#unicode">surrogate</a>, the surrogate
     * value is returned.
     *
     * @param      index   the index of the <code>char</code> value.
     * @return     the <code>char</code> value at the specified index of this string.
     *             The first <code>char</code> value is at index <code>0</code>.
     * @exception  IndexOutOfBoundsException  if the <code>index</code>
     *             argument is negative or not less than the length of this
     *             string.
     */
    at(index : Number) : String {
        if ((index < 0) || (index >= value.length)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return value[index];
    }

    /**
     * Returns the character (Unicode code poNumber) at the specified
     * index. The index refers to <code>char</code> values
     * (Unicode code units) and ranges from <code>0</code> to
     * {@link #length()}<code> - 1</code>.
     *
     * <p> If the <code>char</code> value specified at the given index
     * is in the high-surrogate range, the following index is less
     * than the length of this <code>String</code>, and the
     * <code>char</code> value at the following index is in the
     * low-surrogate range, then the supplementary code poNumber
     * corresponding to this surrogate pair is returned. Otherwise,
     * the <code>char</code> value at the given index is returned.
     *
     * @param      index the index to the <code>char</code> values
     * @return     the code poNumber value of the character at the
     *             <code>index</code>
     * @exception  IndexOutOfBoundsException  if the <code>index</code>
     *             argument is negative or not less than the length of this
     *             string.
     * @since      1.5
     */
    codePoNumberAt(index : Number) : Number {
        if ((index < 0) || (index >= value.length)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return Character.codePoNumberAtImpl(value, index, value.length);
    }

    /**
     * Returns the character (Unicode code poNumber) before the specified
     * index. The index refers to <code>char</code> values
     * (Unicode code units) and ranges from <code>1</code> to {@link
     * CharSequence#length() length}.
     *
     * <p> If the <code>char</code> value at <code>(index - 1)</code>
     * is in the low-surrogate range, <code>(index - 2)</code> is not
     * negative, and the <code>char</code> value at <code>(index -
     * 2)</code> is in the high-surrogate range, then the
     * supplementary code poNumber value of the surrogate pair is
     * returned. If the <code>char</code> value at <code>index -
     * 1</code> is an unpaired low-surrogate or a high-surrogate, the
     * surrogate value is returned.
     *
     * @param     index the index following the code poNumber that should be returned
     * @return    the Unicode code poNumber value before the given index.
     * @exception IndexOutOfBoundsException if the <code>index</code>
     *            argument is less than 1 or greater than the length
     *            of this string.
     * @since     1.5
     */
    codePoNumberBefore(index : Number) : Number {
        Number i = index - 1;
        if ((i < 0) || (i >= value.length)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return Character.codePoNumberBeforeImpl(value, index, 0);
    }

    /**
     * Returns the number of Unicode code poNumbers in the specified text
     * range of this <code>String</code>. The text range begins at the
     * specified <code>beginIndex</code> and extends to the
     * <code>char</code> at index <code>endIndex - 1</code>. Thus the
     * length (in <code>char</code>s) of the text range is
     * <code>endIndex-beginIndex</code>. Unpaired surrogates within
     * the text range count as one code poNumber each.
     *
     * @param beginIndex the index to the first <code>char</code> of
     * the text range.
     * @param endIndex the index after the last <code>char</code> of
     * the text range.
     * @return the number of Unicode code poNumbers in the specified text
     * range
     * @exception IndexOutOfBoundsException if the
     * <code>beginIndex</code> is negative, or <code>endIndex</code>
     * is larger than the length of this <code>String</code>, or
     * <code>beginIndex</code> is larger than <code>endIndex</code>.
     * @since  1.5
     */
    codePoNumberCount(beginIndex : Number, endIndex : Number) : Number {
        if (beginIndex < 0 || endIndex > value.length || beginIndex > endIndex) {
            throw new IndexOutOfBoundsException();
        }
        return Character.codePoNumberCountImpl(value, beginIndex, endIndex - beginIndex);
    }

    /**
     * Returns the index within this <code>String</code> that is
     * offset from the given <code>index</code> by
     * <code>codePoNumberOffset</code> code poNumbers. Unpaired surrogates
     * within the text range given by <code>index</code> and
     * <code>codePoNumberOffset</code> count as one code poNumber each.
     *
     * @param index the index to be offset
     * @param codePoNumberOffset the offset in code poNumbers
     * @return the index within this <code>String</code>
     * @exception IndexOutOfBoundsException if <code>index</code>
     *   is negative or larger then the length of this
     *   <code>String</code>, or if <code>codePoNumberOffset</code> is positive
     *   and the substring starting with <code>index</code> has fewer
     *   than <code>codePoNumberOffset</code> code poNumbers,
     *   or if <code>codePoNumberOffset</code> is negative and the substring
     *   before <code>index</code> has fewer than the absolute value
     *   of <code>codePoNumberOffset</code> code poNumbers.
     * @since 1.5
     */
    offsetByCodePoNumbers(index : Number, codePoNumberOffset  : Number) : Number {
        if (index < 0 || index > value.length) {
            throw new IndexOutOfBoundsException();
        }
        return Character.offsetByCodePoNumbersImpl(value, 0, value.length,
                index, codePoNumberOffset);
    }


    
}

//包级别类 >>>>>>>>>>>>>>>>>>>>>>
