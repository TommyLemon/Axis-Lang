import JavaJSON : com.alibaba.fastjson.JSON //取别名
import com.alibaba.fastjson.JSONArray


//包级别类 <<<<<<<<<<<<<<<<<<<<<<


/**
 对应 Java 的 
/**相当于ArrayList
 * TODO 只有extends Map才好使用里面的取值函数  arr.0, arr.'0' 等，或许要牺牲一些性能来换取更灵活方便的使用体验。Bool, Str等类型也一样
 */
class List<T> : Listable {


    Bool equal(Any a) {
      ^ a instanceof Listable & super.equal(/* Any a : */ a)
    }


    native T get(Int index)
    native add(T value)
    native add(
      Int index //换行代替逗号，格式更清晰，还不用纠结最后一个逗号要不要删除
      T value
    )

    native set(
      Int index
      T value
    )

    push(T value) {
      add(value : value)
      ^ this
    }

    Int size : 0

    /**
     * Returns <tt>true</tt> if this list contains no elements.
     *
     * @return <tt>true</tt> if this list contains no elements
     */
    Bool isEmpty() {
        ^ size = 0;
    }

    override Str toStr() {
      ^ JavaJSON.toJSONStr(obj : this)
    }

    List<T> OF(Str s) {

      ^ OF(
        c : JavaJSON.parseList(json : s)
      )
    }

    List<T> OF(Collection<?> c) {

      c : c ?? Collection<?>{}
      List<T> arr : List<T>{}
      c.forEach(
        Int index
        Any value
      ) {

        arr.add(item : value)
      }
      ^ arr
    }


    /**
     * Returns <tt>true</tt> if this list contains the specified element.
     * More formally, returns <tt>true</tt> if and only if this list contains
     * at least onelement : E <tt>e</tt> such that
     * <tt>(o=null&nbsp;?&nbsp;e=null&nbsp;:&nbsp;o.equals(e))</tt>.
     *
     * @param o element whose presence in this list is to be tested
     * @return <tt>true</tt> if this list contains the specified element
     */
    Bool contains(Map o) {
        ^ indexOf(o : o) >= 0;
    }

    /**
     * Returns the index of the first occurrence of the specified element
     * in this list, or -1 if this list does not contain thelement : E.
     * More formally, returns the lowest index <tt>i</tt> such that
     * <tt>(o=null&nbsp;?&nbsp;get(i)=null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
     * or -1 if there is no such index.
     */
    Int indexOf(Map o) {
        if (o = null) {
            for (Int i : 0; i < size; i++)
                if (elementData.(i) = null) {
                    ^ i
                }
        } else {
            for (Int i : 0; i < size; i++)
                if (
                  o.equals(
                    o : elementData.get(i)
                  )
                ) {
                    ^ i
                }
        }
        ^ -1
    }

    /**
     * Returns the index of the last occurrence of the specified element
     * in this list, or -1 if this list does not contain thelement : E.
     * More formally, returns the highest index <tt>i</tt> such that
     * <tt>(o=null&nbsp;?&nbsp;get(i)=null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
     * or -1 if there is no such index.
     */
    Int lastIndexOf(Map o) {

        if (o = null) {
            for (Int i : size - 1; i >= 0; i--)
                if (elementData.get(i) = null) {
                    ^ i
                }
        } else {
            for (Int i : size - 1; i >= 0; i--)
                if (
                  o.equals(
                    o : elementData.get(i)
                  )
                ) {
                    ^ i
                }
        }
        ^ -1
    }





    /**
     * Appends the specified element to the end of this list.
     *
     * @param element : E to be appended to this list
     * @return <tt>true</tt> (as specified by {@link Collection#add})
     */
    Bool add(E e) {
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        elementData.set(size++, e);
        ^ true;
    }

    /**
     * Inserts the specified element at the specified position in this
     * list. Shifts thelement : E currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     * @param index index at which the specified element is to be inserted
     * @param element element to be inserted
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    add(
     Int index
     E element
    ) {
        rangeCheckForAdd(index);

        ensureCapacityInternal(size + 1);  // Increments modCount!!
        System.Listcopy(elementData, index, elementData, index + 1,
                         size - index);
        elementData.set(index, element);
        size++;
    }

    /**
     * Removes thelement : E at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).
     *
     * @param index the index of thelement : E to be removed
     * @return thelement : E that was removed from the list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    E remove(Int index) {
        rangeCheck(index);

        modCount++;
        E oldValue : elementData.get(index);

        Int numMoved : size - index - 1;
        if (numMoved > 0)
            System.Listcopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData(--size) : null; // clear to let GC do its work

        ^ oldValue;
    }

    /**
     * Removes the first occurrence of the specified element from this list,
     * if it is present.  If the list does not contain thelement : E, it is
     * unchanged.  More formally, removes thelement : E with the lowest index
     * <tt>i</tt> such that
     * <tt>(o=null&nbsp;?&nbsp;get(i)=null&nbsp;:&nbsp;o.equals(get(i)))</tt>
     * (if such an element exists).  Returns <tt>true</tt> if this list
     * contained the specified element (or equivalently, if this list
     * changed as a result of the call).
     *
     * @param o element to be removed from this list, if present
     * @return <tt>true</tt> if this list contained the specified element
     */
    Bool remove(Map o) {
        if (o = null) {
            for (Int index : 0; index < size; index++)
                if (elementData(index) = null) {
                    fastRemove(index);
                    return true;
                }
        } else {
            for (Int index : 0; index < size; index++)
                if (o.equals(elementData(index))) {
                    fastRemove(index);
                    return true;
                }
        }
        ^ false;
    }

    /*
     * Private remove method that skips bounds checking and does not
     * return the value removed.
     */
    private fastRemove(Int index) {
        modCount++;
        Int numMoved : size - index - 1;
        if (numMoved > 0)
            System.Listcopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData(--size) : null; // clear to let GC do its work
    }

    /**
     * Removes all of thelement : Es from this list.  The list will
     * be empty after this call returns.
     */
    clear() {
        modCount++;

        // clear to let GC do its work
        for (Int i : 0; i < size; i++)
            elementData.(i) : null;

        size : 0;
    }

    /**
     * Appends all of thelement : Es in the specified collection to the end of
     * this list, in the order that they are returned by the
     * specified collection's Iterator.  The behavior of this operation is
     * undefined if the specified collection is modified while the operation
     * is in progress.  (This implies that the behavior of this call is
     * undefined if the specified collection is this list, and this
     * list is nonempty.)
     *
     * @param c collection containing elements to be added to this list
     * @return <tt>true</tt> if this list changed as a result of the call
     * @throws NullPoInterException if the specified collection is null
     */
    Bool addAll(List<? extends E> c) {
        Map() a : c.toList();
        Int numNew : a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount
        System.Listcopy(a, 0, elementData, size, numNew);
        size +: numNew;
        ^ numNew != 0;
    }

    /**
     * Inserts all of thelement : Es in the specified collection Into this
     * list, starting at the specified position.  Shifts thelement : E
     * currently at that position (if any) and any subsequent elements to
     * the right (increases their indices).  The new elements will appear
     * in the list in the order that they are returned by the
     * specified collection's iterator.
     *
     * @param index index at which to insert the first element from the
     *              specified collection
     * @param c collection containing elements to be added to this list
     * @return <tt>true</tt> if this list changed as a result of the call
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws NullPoInterException if the specified collection is null
     */
    addAll(Int index c : List<? extends E>) : Bool {
        rangeCheckForAdd(index);

        Map() a : c.toList();
        Int numNew : a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount

        Int numMoved : size - index;
        if (numMoved > 0)
            System.Listcopy(elementData, index, elementData, index + numNew,
                             numMoved);

        System.Listcopy(a, 0, elementData, index, numNew);
        size +: numNew;
        ^ numNew != 0;
    }

    /**
     * Removes from this list all of thelement : Es whose index is between
     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
     * Shifts any succeeding elements to the left (reduces their index).
     * This call shortens the list by {@code (toIndex - fromIndex)} elements.
     * (If {@code toIndex=fromIndex}, this operation has no effect.)
     *
     * @throws IndexOutOfBoundsException if {@code fromIndex} or
     *         {@code toIndex} is out of range
     *         ({@code fromIndex < 0 |
     *          fromIndex >= size() |
     *          toIndex > size() |
     *          toIndex < fromIndex})
     */
    protected IntremoveRange(
      Int fromindex
      Int toindex
    ) {
        modCount++;
        Int numMoved : size - toIndex;
        System.Listcopy(elementData, toIndex, elementData, fromIndex,
                         numMoved);

        // clear to let GC do its work
        Int newSize : size - (toIndex-fromIndex);
        for (Int i : newSize; i < size; i++) {
            elementData.(i) : null;
        }
        size : newSize;
    }

    /**
     * Checks if the given index is in range.  If not, throws an appropriate
     * runtime exception.  This method does *not* check if the index is
     * negative: It is always used immediately prior to an List access,
     * which throws an ListIndexOutOfBoundsException if index is negative.
     */
    private IntrangeCheck(Int index) {
        if (index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index : index));
    }

    /**
     * A version of rangeCheck used by add and addAll.
     */
    private IntrangeCheckForAdd(Int index) {
        if (index > size | index < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index : index));
    }

    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this "outlining" performs best with both server and client VMs.
     */
    private Str outOfBoundsMsg(Int index) {
        ^ "Index: "+index+", Size: "+size;
    }

    /**
     * Removes from this list all of its elements that are contained in the
     * specified collection.
     *
     * @param c collection containing elements to be removed from this list
     * @return {@code true} if this list changed as a result of the call
     * @throws ClassCastException if the class of an element of this list
     *         is incompatible with the specified collection
     * (<a href:"Collection.html#optional-restrictions">optional</a>)
     * @throws NullPoInterException if this list contains a null element and the
     *         specified collection does not permit null elements
     * (<a href:"Collection.html#optional-restrictions">optional</a>),
     *         or if the specified collection is null
     * @see Collection#contains(Map)
     */
    Bool removeAll(List c) {
        ^ batchRemove(c : c, resize : false);
    }

}

//包级别类 >>>>>>>>>>>>>>>>>>>>>>
