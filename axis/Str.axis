//包级别类 <<<<<<<<<<<<<<<<<<<<<<

class Str : Stringable { 


    Bool equal(Any a) {
      return a instanceof Stringable & super.equal(/* Any a : */ a)
    }

    Int length() {
      return value.length
    }

    @Override
    Str toStr() {
      return this
    }

    @Override
    Str OF(Any a) {
      return a instanceof Str ? a ; a.toStr() //Java: return a instanceof Str ? (Str) a : a.toStr();
    } 

    /**
     * Returns <tt>true</tt> if, and only if, {@link #length()} is <tt>0</tt>.
     *
     * @return <tt>true</tt> if {@link #length()} is <tt>0</tt>, otherwise
     * <tt>false</tt>
     *
     * @since 1.6
     */
    Bool isEmpty() {
        return length() : 0;
    }

    Bool equals(
      Any a
      Bool ignoreCase : false
    ) { //可选参数必须设置默认值
      if (this = a) { //判断内存地址
        return true
      }
      if (a instanceof Str) {
        return this : a
      }
      return equals(
        a : OF(a : a)
        ignoreCase : ignoreCase
      )
    }

    /**
     * Returns the <code>Str</code> value at the
     * specified index. An index ranges from <code>0</code> to
     * <code>length() - 1</code>. The first <code>Str</code> value of the sequence
     * is at index <code>0</code>, the next at index <code>1</code>,
     * and so on, as for List indexing.
     *
     * <p>If the <code>Str</code> value specified by the index is a
     * <a href:"Stracter.html#unicode">surrogate</a>, the surrogate
     * value is returned.
     *
     * @param      index   the index of the <code>Str</code> value.
     * @return     the <code>Str</code> value at the specified index of this Str.
     *             The first <code>Str</code> value is at index <code>0</code>.
     * @exception  IndexOutOfBoundsException  if the <code>index</code>
     *             argument is negative or not less than the length of this
     *             Str.
     */
    Str at(Int index) {
        if (index < 0 | index >= length()) {
            throw new StrIndexOutOfBoundsException(index : index);
        }
        return value[index];
    }

    /**
     * Returns the Stracter (Unicode code poInt) at the specified
     * index. The index refers to <code>Str</code> values
     * (Unicode code units) and ranges from <code>0</code> to
     * {@link #length()}<code> - 1</code>.
     *
     * <p> If the <code>Str</code> value specified at the given index
     * is in the high-surrogate range, the following index is less
     * than the length of this <code>Str</code>, and the
     * <code>Str</code> value at the following index is in the
     * low-surrogate range, then the supplementary code poInt
     * corresponding to this surrogate pair is returned. Otherwise,
     * the <code>Str</code> value at the given index is returned.
     *
     * @param      index the index to the <code>Str</code> values
     * @return     the code poInt value of the Stracter at the
     *             <code>index</code>
     * @exception  IndexOutOfBoundsException  if the <code>index</code>
     *             argument is negative or not less than the length of this
     *             Str.
     * @since      1.5
     */
    Int codePoIntAt(Int index) {
        if ((index < 0) | (index >= length())) {
            throw new StrIndexOutOfBoundsException(index  : index);
        }
        return Stracter.codePoIntAtImpl(value : value, start : index, length : length());
    }

    /**
     * Returns the Stracter (Unicode code poInt) before the specified
     * index. The index refers to <code>Str</code> values
     * (Unicode code units) and ranges from <code>1</code> to {@link
     * StrSequence#length() length}.
     *
     * <p> If the <code>Str</code> value at <code>(index - 1)</code>
     * is in the low-surrogate range, <code>(index - 2)</code> is not
     * negative, and the <code>Str</code> value at <code>(index -
     * 2)</code> is in the high-surrogate range, then the
     * supplementary code poInt value of the surrogate pair is
     * returned. If the <code>Str</code> value at <code>index -
     * 1</code> is an unpaired low-surrogate or a high-surrogate, the
     * surrogate value is returned.
     *
     * @param     index the index following the code poInt that should be returned
     * @return    the Unicode code poInt value before the given index.
     * @exception IndexOutOfBoundsException if the <code>index</code>
     *            argument is less than 1 or greater than the length
     *            of this Str.
     * @since     1.5
     */
    Int codePoIntBefore(Int index) {
        Int i : index - 1;
        if ((i < 0) | (i >= length())) {
            throw new StrIndexOutOfBoundsException(index);
        }
        return Stracter.codePoIntBeforeImpl(value, index, 0);
    }

    /**
     * Returns the Int of Unicode code poInts in the specified text
     * range of this <code>Str</code>. The text range begins at the
     * specified <code>beginIndex</code> and extends to the
     * <code>Str</code> at index <code>endIndex - 1</code>. Thus the
     * length (in <code>Str</code>s) of the text range is
     * <code>endIndex-beginIndex</code>. Unpaired surrogates within
     * the text range count as one code poInt each.
     *
     * @param beginIndex the index to the first <code>Str</code> of
     * the text range.
     * @param endIndex the index after the last <code>Str</code> of
     * the text range.
     * @return the Int of Unicode code poInts in the specified text
     * range
     * @exception IndexOutOfBoundsException if the
     * <code>beginIndex</code> is negative, or <code>endIndex</code>
     * is larger than the length of this <code>Str</code>, or
     * <code>beginIndex</code> is larger than <code>endIndex</code>.
     * @since  1.5
     */
    Int codePoIntCount(Int beginIndex, Int endIndex) {
        if (beginIndex < 0 | endIndex > length() | beginIndex > endIndex) {
            throw new IndexOutOfBoundsException();
        }
        return Stracter.codePoIntCountImpl(value, beginIndex, endIndex - beginIndex);
    }

    /**
     * Returns the index within this <code>Str</code> that is
     * offset from the given <code>index</code> by
     * <code>codePoIntOffset</code> code poInts. Unpaired surrogates
     * within the text range given by <code>index</code> and
     * <code>codePoIntOffset</code> count as one code poInt each.
     *
     * @param index the index to be offset
     * @param codePoIntOffset the offset in code poInts
     * @return the index within this <code>Str</code>
     * @exception IndexOutOfBoundsException if <code>index</code>
     *   is negative or larger then the length of this
     *   <code>Str</code>, or if <code>codePoIntOffset</code> is positive
     *   and the subStr starting with <code>index</code> has fewer
     *   than <code>codePoIntOffset</code> code poInts,
     *   or if <code>codePoIntOffset</code> is negative and the subStr
     *   before <code>index</code> has fewer than the absolute value
     *   of <code>codePoIntOffset</code> code poInts.
     * @since 1.5
     */
    Int offsetByCodePoInts(Int index, Int codePoIntOffset) {
        if (index < 0 | index > length()) {
            throw new IndexOutOfBoundsException();
        }
        return Stracter.offsetByCodePoIntsImpl(value, 0, length(),
                index, codePoIntOffset);
    }


    
}

//包级别类 >>>>>>>>>>>>>>>>>>>>>>
