//包级别类 <<<<<<<<<<<<<<<<<<<<<<

class Num : Int, Numbericable {  //父类必须写在第一个，后面的只能是 interface 或 function

  Int leftValue : 0 //小数左边的整数值
  Int rightValue : 0 //小数右边的整数值


  Bool equal(Any a) {
    ^ a instanceof Numbericable & super.equal(/* Any a : */ a)
  }

  @Override
  Int compareTo(Int n) {
    ^ compareTo(
      d : OF(n : n)
    )
  }

  Int compareTo(Num d) {
    Int leftCompare : COMPARE_TO(
      n0 : leftValue
      n1 : d.(leftValue)
    )
    ^ leftCompare != 0 ? leftCompare ; COMPARE_TO(
      n0 : rightValue
      n1 : d.rightValue
    ) // 'n0 : ' ， 'n1 : ' 这种参数字符串都由编辑器生成且不可更改，参考IntelliJ IDEA参数提示功能
  }

  @Override
  Str toStr() {
    ^ leftValue + '.' + rightValue
  }

  //在Java中子类实现父类已有的static函数是覆盖，而不是重写，但这里特地加上 override 是为了更明显地提示这个函数会覆盖父类的同名函数
  override Num OF(Int n) {
    ^ Num{
      leftValue : (
        n = null ? 0 ; n.(
          value
        )
      )
    }
  }

  override  Num OF(Str s) {
    s : s ?; ''
    Int index : s.indexOf(s : '.')
    ^ Num{
      leftValue : Int.OF(
        s : index < 0 ? s ; s.subStr(
          start : 0
          end : index
        )
      )
      rightValue : index < 0 ? 0 ; Int.OF(
        s : s.subStr(start : index + 1)
      )
    }
  }

}

//包级别类 >>>>>>>>>>>>>>>>>>>>>>
